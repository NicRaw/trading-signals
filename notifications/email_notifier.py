import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import List
from datetime import datetime
from config.settings import EmailConfig
from strategies.base_strategy import Signal

class EmailNotifier:
    def __init__(self, config: EmailConfig):
        self.config = config
        
    def send_signals(self, signals: List[Signal]) -> bool:
        if not self.config.enabled or not signals:
            return False
            
        try:
            # Create email content
            subject = f"Trading Signal Alert - {len(signals)} Signal(s) - {datetime.now().strftime('%m/%d %H:%M')}"
            body = self._format_signals(signals)
            
            # Create message
            msg = MIMEMultipart()
            msg['From'] = self.config.sender_email
            msg['To'] = self.config.recipient_email
            msg['Subject'] = subject
            
            msg.attach(MIMEText(body, 'plain'))
            
            # Send email
            server = smtplib.SMTP(self.config.smtp_server, self.config.smtp_port)
            server.starttls()
            server.login(self.config.sender_email, self.config.sender_password)
            
            text = msg.as_string()
            server.sendmail(self.config.sender_email, self.config.recipient_email, text)
            server.quit()
            
            print(f"Email sent successfully with {len(signals)} signals")
            return True
            
        except Exception as e:
            print(f"Error sending email: {e}")
            return False
    
    def _format_signals(self, signals: List[Signal]) -> str:
        body = "üö® TRADING SIGNALS üö®\n"
        body += "=" * 50 + "\n\n"
        
        for i, signal in enumerate(signals, 1):
            body += f"SIGNAL #{i}: {signal.signal_type}\n"
            body += f"Strategy: {signal.strategy_name}\n"
            body += f"Symbol: {signal.symbol}\n"
            body += f"Price: ${signal.current_price:.2f}\n"
            body += f"Confidence: {signal.confidence}%\n"
            body += f"10SMA: ${signal.sma_10:.2f}\n"
            body += f"50SMA: ${signal.sma_50:.2f}\n"
            body += f"Distance from 50SMA: {signal.distance_from_50sma:.1f}%\n"
            
            if signal.stop_loss:
                body += f"Stop Loss: ${signal.stop_loss:.2f}\n"
                
            body += f"\nüéØ ACTION: {signal.action}\n"
            body += f"üìù Notes: {signal.notes}\n"
            body += f"‚è∞ Time: {signal.timestamp.strftime('%m/%d/%Y %H:%M:%S')}\n"
            body += "-" * 30 + "\n\n"
        
        body += "‚ö†Ô∏è IMPORTANT REMINDERS:\n"
        body += "‚Ä¢ This is a signal, not financial advice\n"
        body += "‚Ä¢ Verify market conditions before trading\n"
        body += "‚Ä¢ Use proper position sizing\n"
        body += "‚Ä¢ Set stop losses once in profit\n"
        body += "‚Ä¢ Never risk more than you can afford to lose\n\n"
        
        body += "Generated by Trading Signal System"
        
        return body
